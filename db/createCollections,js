db.createCollection("users", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "email", "password", "timestamps"],
      properties: {
        _id: { bsonType: "objectId" },
        name: {
          bsonType: "string",
          minLength: 3,
          maxLength: 45,
        },
        email: {
          bsonType: "string",
          pattern: "^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$",
        },
        password: {
          bsonType: "string",
          minLength: 6,
          maxLength: 45,
        },
        myCurrentCourses: {
          bsonType: "array",
          maxItems: 5,
          items: {
            bsonType: "object",
            required: ["courseId", "title"],
            properties: {
              courseId: { bsonType: "objectId" },
              title: {
                bsonType: "string",
                minLength: 3,
                maxLength: 45,
              },
            },
          },
        },
        myCurrentCoursewares: {
          bsonType: "array",
          maxItems: 5,
          items: {
            bsonType: "object",
            required: ["courseId", "title"],
            properties: {
              courseId: { bsonType: "objectId" },
              title: {
                bsonType: "string",
                minLength: 3,
                maxLength: 45,
              },
            },
          },
        },
        myCompletedCourses: {
          bsonType: "array",
          items: {
            bsonType: "object",
            required: ["courseId", "title"],
            properties: {
              courseId: { bsonType: "objectId" },
              title: {
                bsonType: "string",
                minLength: 3,
                maxLength: 45,
              },
            },
          },
        },
        myCompletedCoursewares: {
          bsonType: "array",
          items: {
            bsonType: "object",
            required: ["courseId", "title"],
            properties: {
              courseId: { bsonType: "objectId" },
              title: {
                bsonType: "string",
                minLength: 3,
                maxLength: 45,
              },
            },
          },
        },
        myCards: {
          bsonType: "array",
          items: {
            bsonType: "object",
            required: ["_id", "text", "courseId"],
            properties: {
              _id: { bsonType: "objectId" },
              text: {
                bsonType: "string",
                minLength: 3,
                maxLength: 100,
              },
              courseId: { bsonType: "objectId" },
              coursewareId: { bsonType: "objectId" },
              questionId: { bsonType: "objectId" },
              successes: { bsonType: "int" },
              reviews: { bsonType: "int" },
              nextReviewDate: { bsonType: "date" },
            },
          },
        },
        timestamps: {
          bsonType: "object",
          required: ["createdAt", "updatedAt"],
          properties: {
            createdAt: { bsonType: "date" },
            updatedAt: { bsonType: "date" },
          },
        },
      },
    },
  },
});

// Ensure unique email addresses
db.users.createIndex({ email: 1 }, { unique: true });

// Fast lookups on references
db.users.createIndex({ "myCurrentCourses.courseId": 1 });
db.users.createIndex({ "myCurrentCoursewares.courseId": 1 });
db.users.createIndex({ "myCompletedCourses.courseId": 1 });
db.users.createIndex({ "myCompletedCoursewares.courseId": 1 });

// Lookup cards by course/quiz/question
db.users.createIndex({ "myCards.courseId": 1 });
db.users.createIndex({ "myCards.coursewareId": 1 });
db.users.createIndex({ "myCards.questionId": 1 });

db.createCollection("courses", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["title", "coursewares", "timestamps"],
      properties: {
        _id: { bsonType: "objectId" },
        title: { bsonType: "string" },
        coursewares: {
          bsonType: "array",
          items: {
            bsonType: "object",
            oneOf: [
              {
                required: ["_id", "title"],
                properties: {
                  _id: { bsonType: "objectId" },
                  title: { bsonType: "string" },
                },
              },
              {
                required: ["_id", "title", "text"],
                properties: {
                  _id: { bsonType: "objectId" },
                  title: {
                    bsonType: "string",
                    minLength: 3,
                    maxLength: 45,
                  },
                  text: {
                    bsonType: "string",
                    minLength: 100,
                    maxLength: 5000,
                  },
                  quiz: {
                    bsonType: "array",
                    items: {
                      bsonType: "object",
                      required: [
                        "_id",
                        "coursewareId",
                        "text",
                        "choices",
                        "answerIndex",
                      ],
                      properties: {
                        _id: { bsonType: "objectId" },
                        coursewareId: { bsonType: "objectId" },
                        text: {
                          bsonType: "string",
                          minLength: 3,
                          maxLength: 100,
                        },
                        choices: {
                          bsonType: "array",
                          minItems: 2,
                          maxItems: 5,
                          items: { bsonType: "string" },
                        },
                        answerIndex: { bsonType: "int" },
                        timestamps: {
                          bsonType: "object",
                          required: ["createdAt", "updatedAt"],
                          properties: {
                            createdAt: { bsonType: "date" },
                            updatedAt: { bsonType: "date" },
                          },
                        },
                        stats: {
                          bsonType: "object",
                          properties: {
                            likes: { bsonType: "int" },
                            dislikes: { bsonType: "int" },
                            views: { bsonType: "int" },
                          },
                        },
                        createdBy: { bsonType: "objectId" },
                      },
                    },
                  },
                  timestamps: {
                    bsonType: "object",
                    required: ["createdAt", "updatedAt"],
                    properties: {
                      createdAt: { bsonType: "date" },
                      updatedAt: { bsonType: "date" },
                    },
                  },
                  stats: {
                    bsonType: "object",
                    properties: {
                      likes: { bsonType: "int" },
                      dislikes: { bsonType: "int" },
                      views: { bsonType: "int" },
                    },
                  },
                  createdBy: { bsonType: "objectId" },
                },
              },
            ],
          },
        },
        timestamps: {
          bsonType: "object",
          required: ["createdAt", "updatedAt"],
          properties: {
            createdAt: { bsonType: "date" },
            updatedAt: { bsonType: "date" },
          },
        },
        stats: {
          bsonType: "object",
          properties: {
            likes: { bsonType: "int" },
            dislikes: { bsonType: "int" },
            views: { bsonType: "int" },
          },
        },
      },
    },
  },
});

// Prevent duplicate course titles (if needed)
db.courses.createIndex({ title: 1 }, { unique: true });

// Lookup courses by stats popularity
db.courses.createIndex({ "stats.likes": -1 });
db.courses.createIndex({ "stats.views": -1 });

// Lookup coursewares inside courses
db.courses.createIndex({ "coursewares._id": 1 });

// Ensure createdAt queries are fast
db.courses.createIndex({ "timestamps.createdAt": -1 });

db.createCollection("coursewares", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      oneOf: [
        {
          required: ["_id", "title"],
          properties: {
            _id: { bsonType: "objectId" },
            title: { bsonType: "string" },
          },
        },
        {
          required: ["_id", "title", "text"],
          properties: {
            _id: { bsonType: "objectId" },
            title: {
              bsonType: "string",
              minLength: 3,
              maxLength: 45,
            },
            text: {
              bsonType: "string",
              minLength: 100,
              maxLength: 5000,
            },
            quiz: {
              bsonType: "array",
              items: { bsonType: "object" },
            },
            timestamps: {
              bsonType: "object",
              required: ["createdAt", "updatedAt"],
              properties: {
                createdAt: { bsonType: "date" },
                updatedAt: { bsonType: "date" },
              },
            },
            stats: {
              bsonType: "object",
              properties: {
                likes: { bsonType: "int" },
                dislikes: { bsonType: "int" },
                views: { bsonType: "int" },
              },
            },
            createdBy: { bsonType: "objectId" },
          },
        },
      ],
    },
  },
});

// Prevent duplicate courseware titles per course (if courseId added later)
db.coursewares.createIndex({ title: 1 });

// Fast access by createdBy
db.coursewares.createIndex({ createdBy: 1 });

// Query ordering by createdAt
db.coursewares.createIndex({ "timestamps.createdAt": -1 });

// Lookup by stats
db.coursewares.createIndex({ "stats.views": -1 });
db.coursewares.createIndex({ "stats.likes": -1 });

db.createCollection("questions", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: [
        "_id",
        "coursewareId",
        "text",
        "choices",
        "answerIndex",
        "timestamps",
      ],
      properties: {
        _id: { bsonType: "objectId" },
        coursewareId: { bsonType: "objectId" },
        text: {
          bsonType: "string",
          minLength: 3,
          maxLength: 100,
        },
        choices: {
          bsonType: "array",
          minItems: 2,
          maxItems: 5,
          items: { bsonType: "string" },
        },
        answerIndex: { bsonType: "int" },
        timestamps: {
          bsonType: "object",
          required: ["createdAt", "updatedAt"],
          properties: {
            createdAt: { bsonType: "date" },
            updatedAt: { bsonType: "date" },
          },
        },
        stats: {
          bsonType: "object",
          properties: {
            likes: { bsonType: "int" },
            dislikes: { bsonType: "int" },
            views: { bsonType: "int" },
          },
        },
        createdBy: { bsonType: "objectId" },
      },
    },
  },
});

// Ensure uniqueness of question per courseware
db.questions.createIndex({ coursewareId: 1, text: 1 }, { unique: true });

// Lookup by courseware
db.questions.createIndex({ coursewareId: 1 });

// Query ordering by createdAt
db.questions.createIndex({ "timestamps.createdAt": -1 });

// Popular questions (views/likes)
db.questions.createIndex({ "stats.views": -1 });
db.questions.createIndex({ "stats.likes": -1 });

db.createCollection("reviewCards", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["userId", "text", "courseId", "timestamps"],
      properties: {
        _id: { bsonType: "objectId" },
        userId: { bsonType: "objectId" },
        text: {
          bsonType: "string",
          minLength: 3,
          maxLength: 100,
        },
        courseId: { bsonType: "objectId" },
        coursewareId: { bsonType: "objectId" },
        questionId: { bsonType: "objectId" },
        successes: { bsonType: "int" },
        reviews: { bsonType: "int" },
        nextReviewDate: { bsonType: "date" },
        timestamps: {
          bsonType: "object",
          required: ["createdAt", "updatedAt"],
          properties: {
            createdAt: { bsonType: "date" },
            updatedAt: { bsonType: "date" },
          },
        },
      },
    },
  },
});

db.reviewCards.createIndex({ userId: 1, nextReviewDate: 1 }); // main query
db.reviewCards.createIndex({ courseId: 1 }); // course-specific stats
db.reviewCards.createIndex({ questionId: 1 }); // link to questions
